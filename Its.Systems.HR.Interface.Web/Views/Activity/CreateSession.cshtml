@model Its.Systems.HR.Interface.Web.ViewModels.CreateSessionViewModel

@{
    ViewBag.Title = "Skapa kurstillfälle";
}

<h2>Skapa kurstillfälle</h2>
<h4>Skapa ett nytt kurstillfälle till en aktivitet. Deltagare kan också läggas till efter tillfället är skapat!</h4>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <label for="Activity_Id" class="control-label">Kurstillfälle för aktivitet</label>
            <div>
                @Html.DropDownListFor(n => n.Activity.Id, (IEnumerable<SelectListItem>)ViewBag.ActivityId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Activity.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name)
            <div>
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Exempel: 2017" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate)
            <div>
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate)
            <div>
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="NameOfLocation">Plats</label>
            <div>
                @*@Html.TextBoxFor(n => n.NameOfLocation, new { @class = "form-control ui-autocomplete", @data-autocomplete = "@Url.Action("AutoCompleteLocations", "Home")" })*@
                <input type="text" id="NameOfLocation" name="NameOfLocation" class="form-control ui-autocomplete"
                       data-autocomplete="@Url.Action("AutoCompleteLocations", "Home")"/>
                @*@Html.ValidationMessageFor(model => model.NameOfLocation.Id, "", new { @class = "text-danger" })*@
            </div>
        </div>

        @*<div class="form-group">
                <label for="NameOfLocation_Id">Plats</label>
                <div>
                    @Html.DropDownListFor(n => n.NameOfLocation.Id, (IEnumerable<SelectListItem>)ViewBag.NameOfLocationId, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.NameOfLocation.Id, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            <label for="HrPerson_Id">Ansvarig HR</label>
            <div>
                @Html.DropDownListFor(n => n.HrPerson.Id, (IEnumerable<SelectListItem>)ViewBag.HrPersonId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.HrPerson.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="Participant_Id">Lägg till deltagare</label>
            <div>
                @Html.DropDownListFor(n => n.SessionParticipants.First().Participant.Id, (IEnumerable<SelectListItem>)ViewBag.SessionParticipantId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SessionParticipants.First().Participant.Id, "", new { @class = "text-danger" })
                <button type="button" class="btn btn-default js-add-participantBeforeSessionExists">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Lägg till deltagare
                </button>
            </div>
        </div>

        <div>
            @*@Html.Action("GetBookingData", new { eventId = @Model.Event.Id })*@
            <div></div>
            <ul id="selectedParticipants">
                @Html.HiddenFor(n => n.AddedParticipants)
            </ul>
        </div>

        <div class="form-group">
            <div class="m-t-50">
                <button class="btn btn-default">
                    <i class="glyphicon glyphicon-ok"></i> Skapa kurstillfälle
                </button>
                <a href="@Url.Action("Index")" class="btn btn-danger">
                    <i class="glyphicon glyphicon-remove"></i> Avbryt
                </a>
            </div>
        </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

    <script>
        $(function () {

            var listOfParticiantsThatParticipated = [];

            $('.js-add-participantBeforeSessionExists').on('click', function (e) {
                var link = $(e.target);
                var resultName = $('#Participant_Id :selected').text();
                var resultId = $('#Participant_Id').val();

                if ($.inArray(resultId, listOfParticiantsThatParticipated) > -1) {

                    link.after(' <span class="alert alert-danger js-fadeOutThisMessage" role="alert">Redan tillagd!</span>');
                    $(".js-fadeOutThisMessage").fadeOut(2000, function () {
                        $(this).remove();
                    });
                    return;
                }

                listOfParticiantsThatParticipated.push(resultId);
                $('#AddedParticipants').val(listOfParticiantsThatParticipated);

                var html = '<li data-personId="' +
                    resultId +
                    '"><span class="listedParticipantLink">' +
                    resultName +
                    '</span><span> </span><span class="badge js-remove-participantBeforeSessionExists listedParticipantRemove"> x </span></li>';
                $(html).hide().appendTo("#selectedParticipants").fadeIn();

                //console.log(listOfParticiantsThatParticipated);
            });

            $('body').on('click', '.js-remove-participantBeforeSessionExists', function (e) {

                var link = $(e.target);
                // get parent li data-personId
                var resultId = link.parents("li").attr("data-personId");

                var index = listOfParticiantsThatParticipated.indexOf(resultId);
                if (index > -1) {
                    listOfParticiantsThatParticipated.splice(index, 1);
                    $('#AddedParticipants').val(listOfParticiantsThatParticipated);

                    link.parents("li")
                                    .fadeOut(function () {
                                        $(this).remove();
                                    });
                }
                //$('#Participant_Id option[value="' + resultId + '"]').remove();

                //var currentVal = $('#AddedParticipants').val();
                //if (currentVal === "")
                //    $('#AddedParticipants').val(resultId);
                //else
                //    $('#AddedParticipants').val(currentVal + ',' + resultId);

                //console.log(listOfParticiantsThatParticipated);
            });

            $('body').on('click', '.listedParticipantLink', function (e) {

                var link = $(e.target);
                // get parent li data-personId
                var resultId = link.parents("li").attr("data-personId");

                var url = "/Participant/Details/" + resultId;
                window.open(
                          url,
                          "_blank"
                        );
            });


            // AUTOCOMPLETE
            // submits form upon selecting a value
            var submitAutocompleteForm = function (event, ui) {
                var $input = $(this); // the HTML element (Textbox)

                // selected value
                $input.val(ui.item.label); // ui.item.label = the label value (product)

                window.location.href = "/Product/Details?id=" + ui.item.label;
            };

            var createAutocomplete = function () {
                var $input = $(this); // the HTML element (Textbox)

                var options = {
                    // selecting the source by finding elements with the 'data-' attribute
                    source: $input.attr("data-autocomplete") // Required
                    //select: submitAutocompleteForm // Optional
                };

                // apply options
                $input.autocomplete(options);
            };

            // targets input elements with the 'data-' attributes and each time the input changes
            // it calls the 'createAutocomplete' function
            $("input[data-autocomplete]").each(createAutocomplete);

        });
    </script>



}
