@model Its.Systems.HR.Interface.Web.ViewModels.CreateSessionViewModel

@{
    ViewBag.Title = "Skapa kurstillfälle";
}

<h2>Skapa kurstillfälle</h2>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <label for="Activity_Id" class="control-label col-md-2">Kurstillfälle för aktivitet</label>
            <div class="col-md-10">
                @Html.DropDownListFor(n => n.Activity.Id, (IEnumerable<SelectListItem>)ViewBag.ActivityId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Activity.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="Location_Id" class="control-label col-md-2">Plats</label>
            <div class="col-md-10">
                @Html.DropDownListFor(n => n.Location.Id, (IEnumerable<SelectListItem>)ViewBag.LocationId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Location.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="HrPerson_Id" class="control-label col-md-2">Ansvarig HR</label>
            <div class="col-md-10">
                @Html.DropDownListFor(n => n.HrPerson.Id, (IEnumerable<SelectListItem>)ViewBag.HrPersonId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.HrPerson.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="Participant_Id" class="control-label col-md-2">Lägg till deltagare</label>
            <div class="col-md-10">
                @Html.DropDownListFor(n => n.SessionParticipants.First().Participant.Id, (IEnumerable<SelectListItem>)ViewBag.SessionParticipantId, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SessionParticipants.First().Participant.Id, "", new { @class = "text-danger" })
                <button type="button" class="btn btn-default js-add-participantBeforeSessionExists">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Lägg till deltagare
                </button>
            </div>
        </div>

        <div>
            @*@Html.Action("GetBookingData", new { eventId = @Model.Event.Id })*@
            <div class="col-md-2"></div>
            <ul id="selectedParticipants" class="col-md-3">
                @Html.HiddenFor(n => n.AddedParticipants)
            </ul>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <br/>
                <input type="submit" value="Skapa kurstillfälle" class="btn btn-success"/>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(function () {

            var listOfParticiantsThatParticipated = [];

            $('.js-add-participantBeforeSessionExists').on('click', function (e) {
                var link = $(e.target);
                var resultName = $('#Participant_Id :selected').text();
                var resultId = $('#Participant_Id').val();

                if ($.inArray(resultId, listOfParticiantsThatParticipated) > -1) {

                    link.after(' <span class="alert alert-danger js-fadeOutThisMessage" role="alert">Redan tillagd!</span>');
                    $(".js-fadeOutThisMessage").fadeOut(2000, function () {
                        $(this).remove();
                    });
                    return;
                }

                listOfParticiantsThatParticipated.push(resultId);
                $('#AddedParticipants').val(listOfParticiantsThatParticipated);

                var html = '<li data-personId="' +
                    resultId +
                    '"><span class="listedParticipantLink">' +
                    resultName +
                    '</span><span class="label label-warning pull-right js-remove-participantBeforeSessionExists listedParticipantRemove">Ta bort</span></li>';
                $(html).hide().appendTo("#selectedParticipants").fadeIn();

                console.log(listOfParticiantsThatParticipated);
            });

            $('body').on('click', '.js-remove-participantBeforeSessionExists', function (e) {

                var link = $(e.target);
                // get parent li data-personId
                var resultId = link.parents("li").attr("data-personId");

                var index = listOfParticiantsThatParticipated.indexOf(resultId);
                if (index > -1) {
                    listOfParticiantsThatParticipated.splice(index, 1);
                    $('#AddedParticipants').val(listOfParticiantsThatParticipated);

                    link.parents("li")
                                    .fadeOut(function () {
                                        $(this).remove();
                                    });
                }
                //$('#Participant_Id option[value="' + resultId + '"]').remove();

                //var currentVal = $('#AddedParticipants').val();
                //if (currentVal === "")
                //    $('#AddedParticipants').val(resultId);
                //else
                //    $('#AddedParticipants').val(currentVal + ',' + resultId);

                console.log(listOfParticiantsThatParticipated);
            });

            $('body').on('click', '#listedParticipantLink', function () {

                window.location.href = "http://stackoverflow.com";

            });


            $('body').on('click', '#listedParticipantRemove', function () {

                window.location.href = "#";
                listOfParticiantsThatParticipated

            });

            @*$("body").on("click", "#addParticipant", function() {
                $.ajax({
                    url: "/Activity/AddParticpant",
                    type: "post",
                    data: { participantId: @Model., activitySessionId:  }, //if you need to post Model data, use this
                    success: function(result) {
                        $("#addedParticipants").html(result);
                    }
                });
            });*@
        });
    </script>



}
